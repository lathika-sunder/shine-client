import type { ClerkRequest } from './clerkRequest';
import type { AuthenticateRequestOptions } from './types';
interface AuthenticateContextInterface extends AuthenticateRequestOptions {
    sessionTokenInHeader: string | undefined;
    origin: string | undefined;
    host: string | undefined;
    forwardedHost: string | undefined;
    forwardedProto: string | undefined;
    referrer: string | undefined;
    userAgent: string | undefined;
    secFetchDest: string | undefined;
    accept: string | undefined;
    sessionTokenInCookie: string | undefined;
    clientUat: number;
    devBrowserToken: string | undefined;
    handshakeToken: string | undefined;
    clerkUrl: URL;
    sessionToken: string | undefined;
}
interface AuthenticateContext extends AuthenticateContextInterface {
}
/**
 * All data required to authenticate a request.
 * This is the data we use to decide whether a request
 * is in a signed in or signed out state or if we need
 * to perform a handshake.
 */
declare class AuthenticateContext {
    private clerkRequest;
    get sessionToken(): string | undefined;
    constructor(clerkRequest: ClerkRequest, options: AuthenticateRequestOptions);
    private initHandshakeValues;
    private initHeaderValues;
    private initCookieValues;
    private stripAuthorizationHeader;
}
export type { AuthenticateContext };
export declare const createAuthenticateContext: (clerkRequest: ClerkRequest, options: AuthenticateRequestOptions) => AuthenticateContext;
//# sourceMappingURL=authenticateContext.d.ts.map